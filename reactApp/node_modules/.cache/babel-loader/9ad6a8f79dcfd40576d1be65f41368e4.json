{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allen\\\\Documents\\\\GitHub\\\\WebAppDev2Assignment2\\\\reactApp\\\\src\\\\components\\\\templateTvPage\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport TvHeader from \"../headerTv\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport { getTvShowImages } from \"../../api/tmdb-api\";\nimport { useQuery } from \"react-query\";\nimport Spinner from '../spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\"\n  },\n  gridList: {\n    width: 450,\n    height: '100vh'\n  }\n}));\n\nconst TemplateTvPage = _ref => {\n  _s();\n\n  let {\n    tv,\n    children\n  } = _ref;\n  const classes = useStyles();\n  const {\n    data,\n    error,\n    isLoading,\n    isError\n  } = useQuery([\"images1\", {\n    id: tv.id\n  }], getTvShowImages);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n\n  const images1 = data.posters;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TvHeader, {\n      tv: tv\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          children: /*#__PURE__*/_jsxDEV(GridList, {\n            cellHeight: 500,\n            className: classes.gridList,\n            cols: 1,\n            children: images1.map(image => /*#__PURE__*/_jsxDEV(GridListTile, {\n              className: classes.gridListTile,\n              cols: 1,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://image.tmdb.org/t/p/w500/${image.file_path}`,\n                alt: image.poster_path\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 37\n              }, this)\n            }, image.file_path, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TemplateTvPage, \"Yn0g0/7bxMSkyqYRYtzKWyJvDGw=\", false, function () {\n  return [useStyles, useQuery];\n});\n\n_c = TemplateTvPage;\nexport default TemplateTvPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TemplateTvPage\");","map":{"version":3,"sources":["C:/Users/allen/Documents/GitHub/WebAppDev2Assignment2/reactApp/src/components/templateTvPage/index.js"],"names":["React","TvHeader","Grid","makeStyles","GridList","GridListTile","getTvShowImages","useQuery","Spinner","useStyles","theme","root","display","flexWrap","justifyContent","gridList","width","height","TemplateTvPage","tv","children","classes","data","error","isLoading","isError","id","message","images1","posters","padding","map","image","gridListTile","file_path","poster_path"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TvHeader from \"../headerTv\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport { getTvShowImages } from \"../../api/tmdb-api\";\nimport { useQuery } from \"react-query\";\nimport Spinner from '../spinner'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-around\",\n    },\n    gridList: {\n        width: 450,\n        height: '100vh',\n    },\n}));\n\nconst TemplateTvPage = ({ tv, children }) => {\n    const classes = useStyles();\n    const { data , error, isLoading, isError } = useQuery(\n        [\"images1\", { id : tv.id }],\n        getTvShowImages,\n    );\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    if (isError) {\n        return <h1>{error.message}</h1>;\n    }\n    const images1 = data.posters\n\n    return (\n        <>\n            <TvHeader tv={tv} />\n\n            <Grid container spacing={5} style={{ padding: \"15px\" }}>\n                <Grid item xs={3}>\n                    <div className={classes.root}>\n                        <GridList cellHeight={500} className={classes.gridList} cols={1}>\n                            {images1.map((image) => (\n                                <GridListTile key={image.file_path} className={classes.gridListTile} cols={1}>\n                                    <img\n                                        src={`https://image.tmdb.org/t/p/w500/${image.file_path}`}\n                                        alt={image.poster_path}\n                                    />\n                                </GridListTile>\n                            ))}\n                        </GridList>\n                    </div>\n                </Grid>\n\n                <Grid item xs={9}>\n                    {children}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default TemplateTvPage;"]},"metadata":{},"sourceType":"module"}