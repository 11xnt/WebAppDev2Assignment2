{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allen\\\\Documents\\\\GitHub\\\\WebAppDev2Assignment2\\\\reactApp\\\\src\\\\pages\\\\movieDetailsPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport MovieDetails from \"../components/movieDetails\";\nimport PageTemplate from \"../components/templateMoviePage\";\nimport { getMovie } from '../api/tmdb-api';\nimport { useQuery } from \"react-query\";\nimport Spinner from '../components/spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieDetailsPage = props => {\n  _s();\n\n  const {\n    id\n  } = props.match.params;\n  const {\n    data: movie,\n    error,\n    isLoading,\n    isError\n  } = useQuery([\"movie\", {\n    id: id\n  }], getMovie);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movie ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(PageTemplate, {\n        movie: movie,\n        children: /*#__PURE__*/_jsxDEV(MovieDetails, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for movie details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(MovieDetailsPage, \"prNEVrKoUGreyVyd91+BSNdpppc=\", false, function () {\n  return [useQuery];\n});\n\n_c = MovieDetailsPage;\nexport default _c2 = withRouter(MovieDetailsPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MovieDetailsPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/allen/Documents/GitHub/WebAppDev2Assignment2/reactApp/src/pages/movieDetailsPage.js"],"names":["React","withRouter","MovieDetails","PageTemplate","getMovie","useQuery","Spinner","MovieDetailsPage","props","id","match","params","data","movie","error","isLoading","isError","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAASD,KAAK,CAACE,KAAN,CAAYC,MAA3B;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,SAAtB;AAAiCC,IAAAA;AAAjC,MAA6CX,QAAQ,CACvD,CAAC,OAAD,EAAU;AAAEI,IAAAA,EAAE,EAAEA;AAAN,GAAV,CADuD,EAEvDL,QAFuD,CAA3D;;AAKA,MAAIW,SAAJ,EAAe;AACX,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAIC,OAAJ,EAAa;AACT,wBAAO;AAAA,gBAAKF,KAAK,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,cACKJ,KAAK,gBACF;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAEA,KAArB;AAAA,+BACI,QAAC,YAAD;AAAc,UAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,qBADE,gBAOF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARR,mBADJ;AAaH,CA7BD;;GAAMN,gB;UAGiDF,Q;;;KAHjDE,gB;AA+BN,qBAAeN,UAAU,CAACM,gBAAD,CAAzB","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport MovieDetails from \"../components/movieDetails\";\nimport PageTemplate from \"../components/templateMoviePage\";\nimport { getMovie } from '../api/tmdb-api'\nimport { useQuery } from \"react-query\";\nimport Spinner from '../components/spinner'\n\nconst MovieDetailsPage = (props) => {\n    const { id } = props.match.params\n\n    const { data: movie, error, isLoading, isError } = useQuery(\n        [\"movie\", { id: id }],\n        getMovie\n    );\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    if (isError) {\n        return <h1>{error.message}</h1>;\n    }\n\n    return (\n        <>\n            {movie ? (\n                <>\n                    <PageTemplate movie={movie}>\n                        <MovieDetails movie={movie} />\n                    </PageTemplate>\n                </>\n            ) : (\n                <p>Waiting for movie details</p>\n            )}\n        </>\n    );\n};\n\nexport default withRouter(MovieDetailsPage);"]},"metadata":{},"sourceType":"module"}