{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allen\\\\Documents\\\\GitHub\\\\WebAppDev2Assignment2\\\\reactApp\\\\src\\\\pages\\\\favoriteMoviesPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport PageTemplate from \"./components/templateMovieListPage\";\nimport { MoviesContext } from \"../contexts/moviesContext\";\nimport { useQueries } from \"react-query\";\nimport { getMovie } from \"../api/tmdb-api\";\nimport Spinner from './components/spinner';\nimport RemoveFromFavorites from \"./components/cardIcons/removeFromFavorites\";\nimport WriteReview from \"./components/cardIcons/writeReview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FavoriteMoviesPage = () => {\n  _s();\n\n  const {\n    favorites: movieIds\n  } = useContext(MoviesContext); // Create an array of queries and run in parallel.\n\n  const favoriteMovieQueries = useQueries(movieIds.map(movieId => {\n    return {\n      queryKey: [\"movie\", {\n        id: movieId\n      }],\n      queryFn: getMovie\n    };\n  })); // Check if any of the parallel queries is still loading.\n\n  const isLoading = favoriteMovieQueries.find(m => m.isLoading === true);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  const movies = favoriteMovieQueries.map(q => q.data);\n\n  const toDo = () => true;\n\n  return /*#__PURE__*/_jsxDEV(PageTemplate, {\n    title: \"Favorite Movies\",\n    movies: movies,\n    action: movie => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(RemoveFromFavorites, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(WriteReview, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FavoriteMoviesPage, \"9aU82oRUXDTHh3QLTQCcgAQlrCk=\", false, function () {\n  return [useQueries];\n});\n\n_c = FavoriteMoviesPage;\nexport default FavoriteMoviesPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavoriteMoviesPage\");","map":{"version":3,"sources":["C:/Users/allen/Documents/GitHub/WebAppDev2Assignment2/reactApp/src/pages/favoriteMoviesPage.js"],"names":["React","useContext","PageTemplate","MoviesContext","useQueries","getMovie","Spinner","RemoveFromFavorites","WriteReview","FavoriteMoviesPage","favorites","movieIds","favoriteMovieQueries","map","movieId","queryKey","id","queryFn","isLoading","find","m","movies","q","data","toDo","movie"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,OAAOC,WAAP,MAAwB,oCAAxB;;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAM;AAACC,IAAAA,SAAS,EAAEC;AAAZ,MAAyBV,UAAU,CAACE,aAAD,CAAzC,CAD6B,CAG7B;;AACA,QAAMS,oBAAoB,GAAGR,UAAU,CACnCO,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;AACtB,WAAO;AACHC,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU;AAAEC,QAAAA,EAAE,EAAEF;AAAN,OAAV,CADP;AAEHG,MAAAA,OAAO,EAAEZ;AAFN,KAAP;AAIH,GALD,CADmC,CAAvC,CAJ6B,CAY7B;;AACA,QAAMa,SAAS,GAAGN,oBAAoB,CAACO,IAArB,CAA2BC,CAAD,IAAOA,CAAC,CAACF,SAAF,KAAgB,IAAjD,CAAlB;;AAEA,MAAIA,SAAJ,EAAe;AACX,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,QAAMG,MAAM,GAAGT,oBAAoB,CAACC,GAArB,CAA0BS,CAAD,IAAOA,CAAC,CAACC,IAAlC,CAAf;;AACA,QAAMC,IAAI,GAAG,MAAM,IAAnB;;AAEA,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAC,iBADV;AAEI,IAAA,MAAM,EAAEH,MAFZ;AAGI,IAAA,MAAM,EAAGI,KAAD,IAAW;AACf,0BACI;AAAA,gCACI,QAAC,mBAAD;AAAqB,UAAA,KAAK,EAAEA;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,WAAD;AAAa,UAAA,KAAK,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,sBADJ;AAMH;AAVL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAnCD;;GAAMhB,kB;UAI2BL,U;;;KAJ3BK,kB;AAqCN,eAAeA,kBAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport PageTemplate from \"./components/templateMovieListPage\";\nimport { MoviesContext } from \"../contexts/moviesContext\";\nimport { useQueries } from \"react-query\";\nimport { getMovie } from \"../api/tmdb-api\";\nimport Spinner from './components/spinner'\nimport RemoveFromFavorites from \"./components/cardIcons/removeFromFavorites\";\nimport WriteReview from \"./components/cardIcons/writeReview\";\n\nconst FavoriteMoviesPage = () => {\n    const {favorites: movieIds } = useContext(MoviesContext);\n\n    // Create an array of queries and run in parallel.\n    const favoriteMovieQueries = useQueries(\n        movieIds.map((movieId) => {\n            return {\n                queryKey: [\"movie\", { id: movieId }],\n                queryFn: getMovie,\n            };\n        })\n    );\n    // Check if any of the parallel queries is still loading.\n    const isLoading = favoriteMovieQueries.find((m) => m.isLoading === true);\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n    const movies = favoriteMovieQueries.map((q) => q.data);\n    const toDo = () => true;\n\n    return (\n        <PageTemplate\n            title=\"Favorite Movies\"\n            movies={movies}\n            action={(movie) => {\n                return (\n                    <>\n                        <RemoveFromFavorites movie={movie} />\n                        <WriteReview movie={movie} />\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default FavoriteMoviesPage;"]},"metadata":{},"sourceType":"module"}