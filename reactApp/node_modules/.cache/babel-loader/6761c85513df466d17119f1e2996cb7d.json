{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allen\\\\Documents\\\\GitHub\\\\WebAppDev2Assignment2\\\\reactApp\\\\src\\\\pages\\\\tvDetailsPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport TvDetails from \"../components/tvDetails\";\nimport PageTemplate from \"../components/templateTvPage\";\nimport { getTvShow } from '../api/tmdb-api';\nimport { useQuery } from \"react-query\";\nimport Spinner from '../components/spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TvDetailsPage = props => {\n  _s();\n\n  const {\n    id\n  } = props.match.params;\n  const {\n    data: tv,\n    error,\n    isLoading,\n    isError\n  } = useQuery([\"tv\", {\n    id: id\n  }], getTvShow);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tv ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(PageTemplate, {\n        tv: tv,\n        children: /*#__PURE__*/_jsxDEV(TvDetails, {\n          tv: tv\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for tv details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(TvDetailsPage, \"Ka4myyoQ3AGi/RcEMhD0ihEbBs8=\", false, function () {\n  return [useQuery];\n});\n\n_c = TvDetailsPage;\nexport default _c2 = withRouter(TvDetailsPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TvDetailsPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/allen/Documents/GitHub/WebAppDev2Assignment2/reactApp/src/pages/tvDetailsPage.js"],"names":["React","withRouter","TvDetails","PageTemplate","getTvShow","useQuery","Spinner","TvDetailsPage","props","id","match","params","data","tv","error","isLoading","isError","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAASD,KAAK,CAACE,KAAN,CAAYC,MAA3B;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC,EAAR;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,SAAnB;AAA8BC,IAAAA;AAA9B,MAA0CX,QAAQ,CACpD,CAAC,IAAD,EAAO;AAAEI,IAAAA,EAAE,EAAEA;AAAN,GAAP,CADoD,EAEpDL,SAFoD,CAAxD;;AAKA,MAAIW,SAAJ,EAAe;AACX,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAIC,OAAJ,EAAa;AACT,wBAAO;AAAA,gBAAKF,KAAK,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,cACKJ,EAAE,gBACC;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,EAAE,EAAEA,EAAlB;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,EAAE,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,qBADD,gBAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARR,mBADJ;AAaH,CA7BD;;GAAMN,a;UAG8CF,Q;;;KAH9CE,a;AA+BN,qBAAeN,UAAU,CAACM,aAAD,CAAzB","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport TvDetails from \"../components/tvDetails\";\nimport PageTemplate from \"../components/templateTvPage\";\nimport { getTvShow } from '../api/tmdb-api'\nimport { useQuery } from \"react-query\";\nimport Spinner from '../components/spinner'\n\nconst TvDetailsPage = (props) => {\n    const { id } = props.match.params\n\n    const { data: tv, error, isLoading, isError } = useQuery(\n        [\"tv\", { id: id }],\n        getTvShow\n    );\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    if (isError) {\n        return <h1>{error.message}</h1>;\n    }\n\n    return (\n        <>\n            {tv ? (\n                <>\n                    <PageTemplate tv={tv}>\n                        <TvDetails tv={tv} />\n                    </PageTemplate>\n                </>\n            ) : (\n                <p>Waiting for tv details</p>\n            )}\n        </>\n    );\n};\n\nexport default withRouter(TvDetailsPage);"]},"metadata":{},"sourceType":"module"}